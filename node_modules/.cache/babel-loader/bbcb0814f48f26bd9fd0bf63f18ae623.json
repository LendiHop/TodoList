{"ast":null,"code":"var _jsxFileName = \"D:\\\\Incubator\\\\todo\\\\src\\\\AddItemForm.tsx\";\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { TextField } from \"@material-ui/core\";\nexport function AddItemForm(props) {\n  const [title, setTitle] = useState(\"\");\n  const [error, setError] = useState(null);\n\n  const onChangeHandler = e => {\n    setTitle(e.currentTarget.value);\n  };\n\n  const addItem = () => {\n    if (title.trim() !== \"\") {\n      props.addItem(title.trim());\n      setTitle(\"\");\n    } else {\n      setError(\"Title is required\");\n    }\n  };\n\n  const onKeyPressHandler = e => {\n    setError(null);\n\n    if (e.charCode === 13) {\n      addItem();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"Type title\",\n    variant: \"outlined\",\n    value: title,\n    onChange: onChangeHandler,\n    onKeyPress: onKeyPressHandler,\n    error: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: addItem,\n    variant: \"contained\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"+\"), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 23\n    }\n  }, error));\n}","map":{"version":3,"sources":["D:/Incubator/todo/src/AddItemForm.tsx"],"names":["React","useState","Button","TextField","AddItemForm","props","title","setTitle","error","setError","onChangeHandler","e","currentTarget","value","addItem","trim","onKeyPressHandler","charCode"],"mappings":";AAAA,OAAOA,KAAP,IAA2CC,QAA3C,QAA0D,OAA1D;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AAMA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAAkD;AACrD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAgB,IAAhB,CAAlC;;AAEA,QAAMS,eAAe,GAAIC,CAAD,IAAsC;AAC1DJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAR;AACH,GAFD;;AAIA,QAAMC,OAAO,GAAG,MAAM;AAClB,QAAIR,KAAK,CAACS,IAAN,OAAiB,EAArB,EAAyB;AACrBV,MAAAA,KAAK,CAACS,OAAN,CAAcR,KAAK,CAACS,IAAN,EAAd;AACAR,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,KAHD,MAGO;AACHE,MAAAA,QAAQ,CAAC,mBAAD,CAAR;AACH;AACJ,GAPD;;AASA,QAAMO,iBAAiB,GAAIL,CAAD,IAAwC;AAC9DF,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAIE,CAAC,CAACM,QAAF,KAAe,EAAnB,EAAuB;AACnBH,MAAAA,OAAO;AACV;AACJ,GALD;;AAOA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,YAAlB;AACQ,IAAA,OAAO,EAAE,UADjB;AAEQ,IAAA,KAAK,EAAER,KAFf;AAGO,IAAA,QAAQ,EAAEI,eAHjB;AAIO,IAAA,UAAU,EAAEM,iBAJnB;AAKO,IAAA,KAAK,EAAE,CAAC,CAACR,KALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAQI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEM,OAAjB;AAA0B,IAAA,OAAO,EAAE,WAAnC;AAAgD,IAAA,KAAK,EAAE,SAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SARJ,EASKN,KAAK,iBAAI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCA,KAAhC,CATd,CADJ;AAaH","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype addItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: addItemFormPropsType) {\r\n    const [title, setTitle] = useState<string>(\"\");\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <TextField label={\"Type title\"}\r\n                    variant={\"outlined\"}\r\n                    value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n            />\r\n            <Button onClick={addItem} variant={\"contained\"} color={\"primary\"}>+</Button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}