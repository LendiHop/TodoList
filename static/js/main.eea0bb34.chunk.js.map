{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","features/CommonActions/App.ts","utils/error-utils.ts","features/Auth/selectors.tsx","features/Auth/auth-reducer.ts","utils/redux-utils.ts","features/Auth/Login.tsx","api/types.ts","features/Auth/index.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Application/selectors.ts","features/Application/application-reducer.ts","features/Application/index.tsx","app/App.tsx","app/reducers.ts","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleAsyncServerAppError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleAsyncServerNetworkError","message","undefined","selectIsLoggedIn","state","auth","isLoggedIn","login","createAsyncThunk","param","a","res","resultCode","logout","asyncActions","slice","createSlice","name","initialState","reducers","setIsLoggedIn","action","payload","value","extraReducers","builder","addCase","fulfilled","reducer","actions","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","TaskStatuses","TaskPriorities","Login","useSelector","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","authActions","resultAction","rejected","setFieldError","field","to","Grid","container","justify","alignItems","style","height","textAlign","item","xs","Paper","padding","width","Typography","variant","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","color","type","FormControlLabel","control","Checkbox","checked","Button","alignSelf","authReducer","fetchTodolistsTC","todolists","removeTodolistTC","changeTodolistEntityStatus","addTodolistTC","todolist","changeTodolistTitleTC","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","map","splice","unshift","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncTodolistsActions","forEach","todoListId","Object","keys","key","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","marginLeft","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","wordWrap","Task","tasksActions","onClickHandler","useCallback","onChangeHandler","Completed","New","onTitleChangeHandler","newValue","className","position","size","top","right","Delete","fontSize","Todolist","demo","todolistsActions","useEffect","addTaskCallback","helper","thunk","errorMessage","changeTodolistTitle","onFilterButtonClickHandler","tasksForTodolist","renderFilterButton","buttonFilter","text","paddingTop","TodolistsList","addTodolistCallback","breakpointCols","default","1400","1100","700","columnClassName","allTodolistTasks","todolistsAsyncActions","todolistsSlice","tasksAsyncActions","tasksSlice","todolistsReducer","tasksReducer","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","selectStatus","selectIsInitialized","isInitialized","initializeApp","appReducer","useStyles","makeStyles","createStyles","flexGrow","App","classes","authSelectors","logoutHandler","AppBar","Toolbar","LinearProgress","Container","fixed","exact","path","render","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","theme","createMuiTheme","palette","primary","main","dark","light","secondary","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.eea0bb34.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the appActions load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web appActions is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different appActions. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Application is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\nimport {GetTasksResponse, LoginParamsType, ResponseType, TaskType, TodolistType, UpdateTaskModelType} from './types'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '988488bf-4d96-4e4c-8879-9dd6d2da04d6'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n","import {createAction} from '@reduxjs/toolkit'\r\nimport {RequestStatusType} from '../Application/application-reducer'\r\n\r\n\r\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\r\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\r\n\r\nexport const appActions = {\r\n    setAppStatus,\r\n    setAppError\r\n}\r\n","import {appActions} from '../features/CommonActions/App'\r\nimport {AxiosError} from 'axios'\r\nimport {ResponseType} from '../api/types'\r\n\r\n// original type:\r\n// BaseThunkAPI<S, E, D extends Dispatch = Dispatch, RejectedValue = undefined>\r\ntype ThunkAPIType = {\r\n    dispatch: (action: any) => any\r\n    rejectWithValue: Function\r\n}\r\n\r\nexport const handleAsyncServerAppError = <D>(data: ResponseType<D>,\r\n                                             thunkAPI: ThunkAPIType,\r\n                                             showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const handleAsyncServerNetworkError = (error: AxiosError,\r\n                                              thunkAPI: ThunkAPIType,\r\n                                              showError = true) => {\r\n    if (showError) {\r\n        thunkAPI.dispatch(appActions.setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    }\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\r\n\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {FieldErrorType, LoginParamsType} from '../../api/types'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nexport const login = createAsyncThunk<undefined, LoginParamsType,\r\n    { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    login,\r\n    logout\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(login.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logout.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n","import {useDispatch} from 'react-redux'\r\nimport {AppDispatchType} from './types'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}\r\n","import React from 'react'\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Grid,\r\n    Paper,\r\n    TextField,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport {useSelector} from 'react-redux'\r\nimport {login} from './auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from './selectors'\r\nimport {authActions} from './index'\r\nimport {useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isLoggedIn = useSelector(selectIsLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'free@samuraijs.com',\r\n            password: 'free',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        onSubmit: async (values: FormValuesType, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const resultAction = await dispatch(authActions.login(values));\r\n\r\n            if (login.rejected.match(resultAction)) {\r\n                if (resultAction.payload?.fieldsErrors?.length) {\r\n                    const error = resultAction.payload?.fieldsErrors[0];\r\n                    formikHelpers.setFieldError(error.field, error.error);\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\" alignItems=\"center\" style={{height: '93vh', textAlign: 'center'}}>\r\n        <Grid item xs={4}>\r\n            <Paper style={{padding: 25, height: 260, width: 300}}>\r\n                <Typography variant=\"h6\">Sign In</Typography>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormGroup style={{height: 260, width: 280}}>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"email\")}\r\n                            />\r\n                            {formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps(\"password\")}\r\n                            />\r\n                            {formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox\r\n                                    {...formik.getFieldProps(\"rememberMe\")}\r\n                                    checked={formik.values.rememberMe}\r\n                                />}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'secondary'} style={{width: '50%', alignSelf: 'center'}}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","export type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type FieldErrorType = { field: string; error: string }\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {asyncActions, slice} from './auth-reducer'\r\n\r\nconst authActions = {\r\n    ...asyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst authReducer = slice.reducer\r\n\r\nexport {\r\n    authSelectors,\r\n    Login,\r\n    authActions,\r\n    authReducer\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {RequestStatusType} from '../Application'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError,} from '../../utils/error-utils'\r\nimport {TodolistType} from '../../api/types'\r\nimport {ThunkError} from '../../utils/types'\r\nimport {authActions} from \"../Auth\";\r\n\r\nconst {setAppStatus} = appActions\r\n\r\nconst fetchTodolistsTC = createAsyncThunk<{ todolists: TodolistType[] }, undefined, ThunkError>('todolists/fetchTodolists', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nconst removeTodolistTC = createAsyncThunk<{ id: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {dispatch, rejectWithValue}) => {\r\n    //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\r\n    await todolistsAPI.deleteTodolist(todolistId)\r\n    //скажем глобально приложению, что асинхронная операция завершена\r\n    dispatch(setAppStatus({status: 'succeeded'}))\r\n    return {id: todolistId}\r\n})\r\nconst addTodolistTC = createAsyncThunk<{ todolist: TodolistType }, string, ThunkError>\r\n('todolists/addTodolist', async (title, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, thunkAPI) => {\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(param.id, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {id: param.id, title: param.title}\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map((tl) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n            .addCase(authActions.logout.fulfilled, (state) => {\r\n                state.splice(0)\r\n            })\r\n    }\r\n})\r\n\r\nexport const {changeTodolistFilter, changeTodolistEntityStatus} = slice.actions\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {todolistsAPI} from '../../api/todolists-api'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\nimport {handleAsyncServerAppError, handleAsyncServerNetworkError} from '../../utils/error-utils'\r\nimport {asyncActions as asyncTodolistsActions} from './todolists-reducer'\r\nimport {AppRootStateType, ThunkError} from '../../utils/types'\r\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/types'\r\nimport {authActions} from \"../Auth\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\r\n    thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\r\n    async (param, thunkAPI) => {\r\n        await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    })\r\nexport const addTask = createAsyncThunk<TaskType, { title: string, todolistId: string }, ThunkError>('tasks/addTask',\r\n    async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\r\n        try {\r\n            const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\r\n                return res.data.data.item\r\n            } else {\r\n                handleAsyncServerAppError(res.data, thunkAPI, false)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err) {\r\n            return handleAsyncServerNetworkError(err, thunkAPI, false)\r\n        }\r\n    })\r\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string },\r\n                                                                      thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n\r\n    const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.model\r\n    }\r\n\r\n    const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            return handleAsyncServerAppError(res.data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return handleAsyncServerNetworkError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTasks,\r\n    removeTask,\r\n    addTask,\r\n    updateTask\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(asyncTodolistsActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(asyncTodolistsActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(asyncTodolistsActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n            .addCase(authActions.logout.fulfilled, (state) => {\r\n                Object.keys(state).map(key => delete state[key])\r\n            })\r\n    }\r\n})\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormSubmitHelperType = { setError: (error: string) => void, setTitle: (title: string) => void}\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string, helper: AddItemFormSubmitHelperType) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = async () => {\r\n        if (title.trim() !== '') {\r\n                addItem(title, {setError, setTitle})\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode} style={{wordWrap: 'break-word'}}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {tasksActions} from '../../index'\r\nimport {TaskStatuses, TaskType} from '../../../../api/types'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {updateTask, removeTask} = useActions(tasksActions)\r\n\r\n    const onClickHandler = useCallback(() => removeTask({taskId: props.task.id, todolistId: props.todolistId}),\r\n        [props.task.id, props.todolistId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        updateTask({\r\n            taskId: props.task.id,\r\n            model: {title: newValue},\r\n            todolistId: props.todolistId\r\n        })\r\n    }, [props.task.id, props.todolistId])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"secondary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton size={'small'} onClick={onClickHandler} style={{ position: 'absolute', top: '2px', right: '2px'} }>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton, Paper, PropTypes} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {tasksActions, todolistsActions} from '../index'\r\nimport {TaskStatuses, TaskType} from '../../../api/types'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {changeTodolistFilter, removeTodolistTC, changeTodolistTitleTC} = useActions(todolistsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        if (!props.tasks.length) {\r\n            fetchTasks(props.todolist.id)\r\n        }\r\n    }, [])\r\n\r\n    const addTaskCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n\r\n        let thunk = tasksActions.addTask({title: title, todolistId: props.todolist.id})\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (tasksActions.addTask.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n\r\n    }, [props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        removeTodolistTC(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        changeTodolistTitleTC({id: props.todolist.id, title: title})\r\n    }, [props.todolist.id])\r\n\r\n    const onFilterButtonClickHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\r\n        filter: filter,\r\n        id: props.todolist.id\r\n    }), [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    const renderFilterButton = (buttonFilter: FilterValuesType,\r\n                                color: PropTypes.Color,\r\n                                text: string) => {\r\n        return <Button variant={props.todolist.filter === buttonFilter ? 'outlined' : 'text'}\r\n                       onClick={() => onFilterButtonClickHandler(buttonFilter)}\r\n                       color={color}>{text}\r\n        </Button>\r\n    }\r\n\r\n    return <Paper style={{padding: '10px', position: 'relative'}}>\r\n        <IconButton\r\n            size={'small'}\r\n            onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n                    style={{position: 'absolute', right: '5px', top: '5px'}}\r\n        >\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n        <h3 style={{wordWrap: 'break-word'}}>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTaskCallback} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}/>)\r\n            }\r\n            {!tasksForTodolist.length && <div style={{padding: '10px', color: 'grey'}}>No tasks</div>}\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            {renderFilterButton('all', 'default', 'All')}\r\n            {renderFilterButton('active', 'primary', 'Active')}\r\n            {renderFilterButton('completed', 'secondary', 'Completed')}\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm, AddItemFormSubmitHelperType} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsLoggedIn} from '../Auth/selectors'\r\nimport {todolistsActions} from './index'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\nimport Masonry from 'react-masonry-css'\r\nimport './TodolistsList.css'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const {fetchTodolistsTC} = useActions(todolistsActions)\r\n\r\n    const addTodolistCallback = useCallback(async (title: string, helper: AddItemFormSubmitHelperType) => {\r\n        let thunk = todolistsActions.addTodolistTC(title)\r\n        const resultAction = await dispatch(thunk)\r\n\r\n        if (todolistsActions.addTodolistTC.rejected.match(resultAction)) {\r\n            if (resultAction.payload?.errors?.length) {\r\n                const errorMessage = resultAction.payload?.errors[0]\r\n                helper.setError(errorMessage)\r\n            } else {\r\n                helper.setError('Some error occured')\r\n            }\r\n        } else {\r\n            helper.setTitle('')\r\n        }\r\n    }, [])\r\n\r\n    const breakpoints = {\r\n        default: 4,\r\n        1400: 3,\r\n        1100: 2,\r\n        700: 1,\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        if (!todolists.length) {\r\n            fetchTodolistsTC()\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}} justify='center'>\r\n            <AddItemForm addItem={addTodolistCallback}/>\r\n        </Grid>\r\n        <Masonry\r\n            breakpointCols={breakpoints}\r\n            className=\"my-masonry-grid\"\r\n            columnClassName=\"my-masonry-grid_column\"\r\n        >\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <div key={tl.id}>\r\n                        <div style={{width: '290px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                })\r\n            }\r\n        </Masonry>\r\n    </>\r\n}\r\n","import {asyncActions as todolistsAsyncActions, slice as todolistsSlice} from './todolists-reducer'\r\nimport {asyncActions as tasksAsyncActions, slice as tasksSlice} from './tasks-reducer'\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistsActions = {\r\n    ...todolistsAsyncActions,\r\n    ...todolistsSlice.actions\r\n}\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst todolistsReducer  = todolistsSlice.reducer\r\nconst tasksReducer  = tasksSlice.reducer\r\n\r\nexport {\r\n    tasksActions,\r\n    todolistsActions,\r\n    TodolistsList,\r\n    todolistsReducer,\r\n    tasksReducer\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../../features/CommonActions/App'\r\nimport {AppRootStateType} from '../../utils/types'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const {setAppError} = useActions(appActions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppError({error: null});\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {AppRootStateType} from '../../utils/types'\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized\r\n","import {authAPI} from '../../api/todolists-api'\r\nimport {authActions} from '../Auth'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {appActions} from '../CommonActions/App'\r\n\r\nconst initializeApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(authActions.setIsLoggedIn({value: true}))\r\n    } else {\r\n\r\n    }\r\n})\r\n\r\nexport const asyncActions = {\r\n    initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isInitialized = true\r\n            })\r\n            .addCase(appActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n            .addCase(appActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n    }\r\n})\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n","import * as appSelectors from './selectors'\r\nimport {RequestStatusType as T1, slice} from './application-reducer'\r\nimport {asyncActions} from './application-reducer'\r\n\r\nconst appReducer = slice.reducer\r\nconst actions = slice.actions\r\n\r\nconst appActions = {\r\n    ...actions,\r\n    ...asyncActions\r\n}\r\nexport type RequestStatusType = T1\r\n\r\nexport {\r\n    appSelectors,\r\n    appReducer,\r\n    appActions\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    createStyles,\r\n    LinearProgress,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {TodolistsList} from '../features/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {appActions} from '../features/Application'\r\nimport {Route} from 'react-router-dom'\r\nimport {authActions, authSelectors, Login} from '../features/Auth'\r\nimport {selectIsInitialized, selectStatus} from '../features/Application/selectors'\r\nimport {useActions} from '../utils/redux-utils'\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n    useEffect(() => {\r\n        if (!isInitialized) {\r\n            initializeApp()\r\n        }\r\n    }, []);\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        logout()\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Todolist\r\n                    </Typography>\r\n                    {isLoggedIn &&\r\n                    <Button variant=\"outlined\" color=\"secondary\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Route exact path={'/'} render={() => <TodolistsList demo={false}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// мы задаём структуру нашего единственного объекта-состояния\r\nimport {combineReducers} from 'redux'\r\nimport {appReducer} from '../features/Application'\r\nimport {authReducer} from '../features/Auth'\r\nimport {tasksReducer, todolistsReducer} from '../features/TodolistsList'\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// непосредственно создаём store\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\n","import thunkMiddleware from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {rootReducer} from './reducers'\r\n\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./reducers', () => {\r\n        store.replaceReducer(rootReducer)\r\n    })\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './app/App'\r\nimport {store} from './app/store'\r\nimport {Provider} from 'react-redux'\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {createMuiTheme, MuiThemeProvider} from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#24272a',\r\n            dark: '#191b1d',\r\n            light: '#4f5254',\r\n        },\r\n        secondary: {\r\n            main: '#ffc400',\r\n            dark: '#b28900',\r\n            light: '#ffcf33',\r\n        }\r\n    }\r\n})\r\n\r\nconst rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <MuiThemeProvider theme={theme}>\r\n                    <App/>\r\n                </MuiThemeProvider>\r\n            </HashRouter>\r\n        </Provider>, document.getElementById('root'))\r\n}\r\n\r\nrerenderEntireTree()\r\n\r\n\r\n// If you want your appActions to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./app/App', () => {\r\n        rerenderEntireTree();\r\n    })\r\n}\r\n"],"sourceRoot":""}